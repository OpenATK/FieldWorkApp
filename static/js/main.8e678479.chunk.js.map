{"version":3,"sources":["view/logo.svg","serviceWorker.js","view/Map/BoundaryDrawing/index.js","view/Map/Fields/index.js","view/Map/index.js","view/TopBar/DrawingToolbar/index.js","view/TopBar/NormalToolbar/OperationDropdown/index.js","view/TopBar/NormalToolbar/MoreDropdown/index.js","view/TopBar/NormalToolbar/index.js","view/TopBar/index.js","view/FieldList/index.js","view/FieldDetails/index.js","view/AcresStatus/AcresPlanned/index.js","view/AcresStatus/AcresStarted/index.js","view/AcresStatus/AcresDone/index.js","view/AcresStatus/index.js","view/Modals/SaveField.js","view/Modals/OADADomain.js","view/Modals/NewOperation.js","view/App.js","controller/modules/TopBar/sequences/onAddField.js","controller/modules/TopBar/sequences/onSaveField.js","controller/modules/TopBar/sequences/onCancelField.js","controller/modules/TopBar/sequences/onConnect.js","controller/modules/TopBar/modules/OperationDropdown/sequences/onAdd.js","controller/modules/TopBar/modules/OperationDropdown/sequences/onChange.js","controller/modules/TopBar/modules/OperationDropdown/sequences/onOpenChange.js","controller/modules/TopBar/modules/OperationDropdown/sequences/onSearch.js","controller/modules/TopBar/modules/OperationDropdown/computed/operations.js","controller/modules/TopBar/index.js","controller/modules/TopBar/modules/OperationDropdown/index.js","controller/modules/OADAManager/tree.js","controller/modules/Modals/SaveField/actions/saveField.js","controller/modules/Modals/SaveField/index.js","controller/modules/Modals/SaveField/actions/open.js","controller/modules/Modals/OADADomain/actions/open.js","controller/modules/Modals/OADADomain/sequences/onConnectClick.js","controller/modules/Modals/OADADomain/index.js","controller/modules/Modals/NewOperation/actions/open.js","controller/modules/Modals/NewOperation/actions/saveOperation.js","controller/modules/Modals/NewOperation/index.js","controller/modules/Modals/index.js","controller/modules/Map/actions/styleField.js","controller/modules/Map/modules/BoundaryDrawing/actions/addPointToBoundary.js","controller/computed/seasonFields.js","controller/modules/Map/computed/fields.js","controller/modules/Map/index.js","controller/modules/Map/sequences/onFieldClick.js","controller/modules/Map/sequences/onMapClick.js","controller/modules/Map/modules/BoundaryDrawing/index.js","controller/modules/Map/modules/BoundaryDrawing/sequences/onMapClick.js","controller/modules/Map/modules/BoundaryDrawing/sequences/onMarkerMove.js","controller/modules/Map/modules/BoundaryDrawing/actions/updateBoundaryPoint.js","controller/modules/Map/modules/BoundaryDrawing/sequences/onStartDrawing.js","controller/modules/Map/modules/BoundaryDrawing/sequences/onStopDrawing.js","controller/modules/FieldDetails/actions/changeFieldStatus.js","controller/modules/FieldDetails/sequences/onStatusChange.js","controller/modules/FieldDetails/computed/field.js","controller/modules/FieldDetails/sequences/onEditFieldClick.js","controller/modules/FieldDetails/actions/close.js","controller/modules/FieldDetails/index.js","controller/modules/FieldDetails/actions/open.js","controller/modules/OADAManager/actions/connect.js","controller/modules/OADAManager/sequences/onFieldChanged.js","controller/modules/OADAManager/index.js","controller/modules/OADAManager/sequences/onDomainChanged.js","controller/modules/OADAManager/actions/fetchAndWatch.js","controller/modules/OADAManager/actions/initBookmarks.js","controller/modules/OADAManager/actions/changeSeasonFields.js","controller/test/testFields.js","controller/index.js","controller/computed/acresStatus.js","controller/computed/operationFields.js","index.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","connect","boundary","state","_templateObject","drawing","_templateObject2","onMarkerMove","sequences","_templateObject3","_ref","react_default","a","createElement","LayerGroup","Polygon","positions","_","map","latlng","id","Marker","position","key","draggable","onMove","_ref2","oldLatLng","fields","Fields_templateObject","onClick","Fields_templateObject2","keys","length","field","GeoJSON","bubblingMouseEvents","style","data","uuid","evt","Map_templateObject","foo","es_Map","center","zoom","_objectSpread","zoomControl","TileLayer","url","attribution","Map_BoundaryDrawing","Map_Fields","onSaveField","DrawingToolbar_templateObject","onCancelField","DrawingToolbar_templateObject2","Toolbar","View","flex","Button","color","selectedOperation","OperationDropdown_templateObject","operations","OperationDropdown_templateObject2","open","OperationDropdown_templateObject3","search","_templateObject4","onAdd","_templateObject5","onChange","_templateObject6","onOpenChange","_templateObject7","onSearch","_templateObject8","flexDirection","Dropdown","onOpen","onBlur","text","name","icon","floating","labeled","button","className","Menu","top","Item","textAlign","value","Input","iconPosition","marginTop","target","scrolling","option","Object","assign","onAddField","MoreDropdown_templateObject","onConnect","MoreDropdown_templateObject2","_React$useState","React","useState","_React$useState2","slicedToArray","anchorEl","setAnchorEl","handleClose","IconButton","edge","aria-label","event","currentTarget","MoreHoriz_default","Menu_Menu","right","keepMounted","onClose","MenuItem","toggleTitle","NormalToolbar_templateObject","marginRight","Menu_default","OperationDropdown","NormalToolbar_MoreDropdown","TopBar_templateObject","zIndex","AppBar","TopBar_DrawingToolbar","TopBar_NormalToolbar","TemporaryDrawer","Drawer","variant","height","width","role","List","index","ListItem","ListItemIcon","MoveToInbox_default","Mail_default","ListItemText","primary","Divider","FieldDetails_templateObject","FieldDetails_templateObject2","onStatusChange","FieldDetails_templateObject3","onEditFieldClick","FieldDetails_templateObject4","anchor","paddingBottom","justifyContent","alignItems","Text","fontWeight","fontSize","marginLeft","concat","Math","round","acres","Edit_default","FormControl","component","FormGroup","row","FormControlLabel","control","Checkbox","checked","status","label","labelPlacement","AcresPlanned_templateObject","acresStatus","AcresPlanned_templateObject2","backgroundColor","paddingLeft","paddingRight","paddingTop","borderRadius","textShadowColor","textShadowOffset","textShadowRadius","planned","plannedPercentage","AcresStarted_templateObject","AcresStarted_templateObject2","started","startedPercentage","AcresDone_templateObject","AcresDone_templateObject2","done","donePercentage","AcresStatus","display","AcresStatus_AcresPlanned","AcresStatus_AcresStarted","AcresStatus_AcresDone","Component","SaveField_templateObject","SaveField_templateObject2","onNameChange","SaveField_templateObject3","onCancel","SaveField_templateObject4","onSave","SaveField_templateObject5","Modal","size","Header","Content","placeholder","Actions","Button_Button","negative","positive","labelPosition","content","OADADomain_templateObject","domain","OADADomain_templateObject2","onDomainChange","OADADomain_templateObject3","OADADomain_templateObject4","OADADomain_templateObject5","NewOperation_templateObject","NewOperation_templateObject2","NewOperation_templateObject3","NewOperation_templateObject4","NewOperation_templateObject5","App","view_TopBar","AcresStatus_AcresStatus","src_view_Map","view_FieldDetails","Modals_SaveField","Modals_OADADomain","Modals_NewOperation","sequences_onAddField","get","onAddField_templateObject","sequences_onSaveField","onSaveField_templateObject","sequences_onCancelField","onCancelField_templateObject","sequences_onConnect","onConnect_templateObject","sequences_onAdd","onAdd_templateObject","sequences_onChange","set","moduleState","onChange_templateObject","props","onChange_templateObject2","onChange_templateObject3","sequences_onOpenChange","onOpenChange_templateObject","onOpenChange_templateObject2","sequences_onSearch","onSearch_templateObject","onSearch_templateObject2","operations_templateObject7","currentConnection","operations_templateObject8","omitBy","_templateObject9","o","k","startsWith","_templateObject10","_templateObject11","modules_TopBar","modules","selected","list","operations_templateObject","operations_templateObject2","operations_templateObject3","operations_templateObject4","operations_templateObject5","operations_templateObject6","compact","empty","circular","tree","bookmarks","_type","_rev","*","seasons","saveField","points","saveField_templateObject","type","coordinates","saveField_templateObject2","console","log","JSON","stringify","when","saveField_templateObject6","true","_ref4","requests","path","saveField_objectSpread","year","connection_id","saveField_templateObject5","oada","put","false","_ref3","store","saveField_templateObject3","saveField_templateObject4","stopDrawing","Modals_SaveField_templateObject","modules_Modals_SaveField","open_templateObject","open_templateObject2","Modals_SaveField_templateObject2","Modals_SaveField_templateObject3","Modals_SaveField_templateObject4","Modals_SaveField_templateObject5","OADADomain_actions_open","actions_open_templateObject","actions_open_templateObject2","onConnectClick","onConnectClick_templateObject","onConnectClick_templateObject2","onConnectClick_templateObject3","modules_Modals_OADADomain","Modals_OADADomain_templateObject","Modals_OADADomain_templateObject2","Modals_OADADomain_templateObject3","NewOperation_actions_open","NewOperation_actions_open_templateObject","NewOperation_actions_open_templateObject2","saveOperation","operation","saveOperation_templateObject","saveOperation_templateObject4","saveOperation_templateObject3","saveOperation_templateObject2","saveOperation_templateObject5","saveOperation_templateObject6","Modals","SaveField","OADADomain","NewOperation","Modals_NewOperation_templateObject","Modals_NewOperation_templateObject2","Modals_NewOperation_templateObject3","Modals_NewOperation_templateObject4","styleField","highlight","fieldId","styleField_templateObject","weight","unhighlight","styleField_templateObject2","actions_addPointToBoundary","addPointToBoundary_templateObject","lat","lng","seasonFields","seasonFields_templateObject","seasonFields_templateObject2","seasonFields_templateObject3","seasonFields_templateObject4","modules_Map","fieldStyles","selectedField","fields_templateObject","fields_templateObject2","drawingBoundary","fields_templateObject3","fields_templateObject4","fieldsToRender","styledField","clone","merge","fillColor","onFieldClick","onFieldClick_templateObject2","onFieldClick_templateObject3","onFieldClick_templateObject4","onFieldClick_templateObject5","onFieldClick_templateObject6","onFieldClick_templateObject","onMapClick","sequence","onMapClick_templateObject","onMapClick_templateObject2","onMapClick_templateObject3","onMapClick_templateObject5","onMapClick_templateObject6","onMapClick_templateObject4","BoundaryDrawing","sequences_onMapClick_templateObject","addPointToBoundary","debounce","continue","updateBoundaryPoint_templateObject","discard","onStartDrawing","onStartDrawing_templateObject","onStartDrawing_templateObject2","onStopDrawing","onStopDrawing_templateObject","onStopDrawing_templateObject2","sequences_onStatusChange","_templateObject14","selectedFieldId","changeFieldStatus_templateObject10","changeFieldStatus_templateObject11","_templateObject12","_templateObject13","newStatus","delete","_id","changeFieldStatus_templateObject","changeFieldStatus_templateObject2","changeFieldStatus_templateObject3","unset","changeFieldStatus_templateObject4","changeFieldStatus_templateObject5","changeFieldStatus_templateObject6","changeFieldStatus_templateObject7","changeFieldStatus_templateObject8","changeFieldStatus_templateObject9","field_templateObject","field_templateObject2","field_templateObject3","field_templateObject4","field_templateObject5","field_templateObject6","geojsonArea","geometry","sequences_onEditFieldClick","currentField","forEach","coors","onEditFieldClick_templateObject","modules_FieldDetails","FieldDetails_actions_open_templateObject","close_templateObject","_SCOPE","_TOKEN","_CURRENT_METADATA","_CURRENT_REDIRECT","OADAManager","connected","onDomainChanged","connect_templateObject","options","redirect","metadata","scope","token","connect_templateObject2","objectDestructuringEmpty","watch","signals","initBookmarks_templateObject","initBookmarks_templateObject2","initBookmarks_templateObject3","undefined","initBookmarks_templateObject4","initBookmarks_templateObject5","initBookmarks_templateObject6","onDomainChanged_templateObject","onFieldChanged","fieldsChanged","obj","push","changeSeasonFields_templateObject2","fieldChange","isEmpty","doNothing","changeSeasonFields_templateObject","testFields","a71add90-8e7e-11e9-b173-dbfcd80b1e21","1a44fb70-8e7f-11e9-bdbd-692fecccc792","8212ed20-8e7f-11e9-a624-f37c7ec83e91","controller","fieldOperations","operationFields","operationFields_templateObject","operationFields_templateObject2","operationFields_templateObject3","operationFields_templateObject4","fieldsSeason","fieldOperation","area","total","localData","organizations","abc123","controller_objectSpread","2019","TopBar","Map","FieldDetails","OADA","controller_templateObject","controller_templateObject2","app","devtools","ReactDOM","render","_cerebral_react","view_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e678479.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/*\n  Adds points/polygons to map when drawing a boundary\n*/\nimport React, { Component } from 'react';\nimport { Marker, Polygon, LayerGroup } from 'react-leaflet'\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\nimport _ from 'lodash';\n\nexport default connect(\n  {\n    boundary: state`Map.BoundaryDrawing.boundary`,\n    drawing: state`Map.BoundaryDrawing.drawing`,\n    onMarkerMove: sequences`Map.BoundaryDrawing.onMarkerMove`\n  },\n  function BoundaryDrawing({ drawing, boundary, onMarkerMove}) {\n    if (!drawing) return null;\n    return (\n      <LayerGroup>\n        <Polygon positions={_.map(boundary)} />\n        {_.map(boundary, (latlng, id) => <Marker position={latlng} key={id} draggable onMove={({latlng, oldLatLng}) => onMarkerMove({latlng, oldLatLng, id})}/>)}\n      </LayerGroup>\n    );\n  }\n)\n","/*\n  Adds points/polygons to map when drawing a boundary\n*/\nimport React, { Component } from 'react';\nimport { Marker, Polygon, LayerGroup, GeoJSON } from 'react-leaflet'\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\nimport _ from 'lodash';\nimport uuid from 'uuid/v1'\n\nexport default connect(\n  {\n    fields: state`Map.fields`,\n    onClick: sequences`Map.onFieldClick`\n  },\n  function Fields({ fields, onClick }) {\n    if (_.keys(fields).length == 0) return null;\n    return (\n      <LayerGroup>\n        {_.map(fields, (field) =>\n          <GeoJSON\n            bubblingMouseEvents={false}\n            style={field.style}\n            data={field.boundary}\n            key={uuid()} //Must be uuid to unmount/mount when field style or boundary changes\n            onClick={(evt) => {onClick({id: field.id})}} />\n        )}\n      </LayerGroup>\n    );\n  }\n)\n","import React, { Component } from 'react';\nimport { Map, Marker, Popup, TileLayer, ZoomControl } from 'react-leaflet'\nimport './index.css'\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nimport BoundaryDrawing from './BoundaryDrawing'\nimport Fields from './Fields'\n\nexport default connect(\n  {\n    onClick: sequences`Map.onMapClick`\n  },\n  function Map({ foo, onClick }) {\n    return (\n        <Map center={[40.630162850630974, 276.11022041179245]} zoom={13} onClick={(evt) => onClick({...evt.latlng})} zoomControl={false}>\n          <TileLayer\n            url=\"https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n            attribution=\"Tiles &copy; Esri &mdash; Source: Esri, i-cubed, USDA, USGS, AEX, GeoEye, Getmapping, Aerogrid, IGN, IGP, UPR-EGP, and the GIS User Community\"\n          />\n          <BoundaryDrawing />\n          <Fields />\n        </Map>\n    );\n  }\n)\n","import React, {Component} from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\nimport {TextInput, View} from 'react-native'\n\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect(\n  {\n    onSaveField: sequences`TopBar.onSaveField`,\n    onCancelField: sequences`TopBar.onCancelField`\n  }, function DrawingToolbar({onSaveField, onCancelField}) {\n    return (\n      <Toolbar>\n        <View style={{flex: 1}} />\n        <Button color=\"inherit\" onClick={() => onCancelField()}>Cancel</Button>\n        <Button color=\"inherit\" onClick={() => onSaveField()}>Save</Button>\n      </Toolbar>\n    );\n  }\n)\n","import React from 'react'\nimport { Dropdown, Input } from 'semantic-ui-react'\nimport {View, Text} from 'react-native'\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\n/*const tagOptions = [\n  {\n    text: 'Important',\n    value: 'Important',\n    label: { color: 'red', empty: true, circular: true },\n  }\n]*/\n\nexport default connect({\n  selectedOperation: state`TopBar.OperationDropdown.selectedOperation`,\n  operations: state`TopBar.OperationDropdown.list`,\n  open: state`TopBar.OperationDropdown.open`,\n  search: state`TopBar.OperationDropdown.search`,\n  onAdd: sequences`TopBar.OperationDropdown.onAdd`,\n  onChange: sequences`TopBar.OperationDropdown.onChange`,\n  onOpenChange: sequences`TopBar.OperationDropdown.onOpenChange`,\n  onSearch: sequences`TopBar.OperationDropdown.onSearch`\n}, function OperationsDropdown({style, selectedOperation, operations, open, search, onAdd, onChange, onOpenChange, onSearch}) {\n  return (\n    <View style={style}>\n      <View style={{flexDirection: 'row'}}>\n        {\n          selectedOperation ?\n            <Dropdown\n              open={open}\n              onOpen={() => {onOpenChange({open: true})}}\n              onBlur={() => {onOpenChange({open: false})}}\n              text={selectedOperation.name}\n              icon='filter'\n              floating\n              labeled\n              button\n              className='icon'\n            >\n              <Dropdown.Menu style={{top: 42}}>\n                <Dropdown.Item style={{textAlign: 'center'}} text='Add New Operation' value='Add New Operation' onClick={(evt, data)=>{onAdd()}} />\n                <Input icon='search' iconPosition='left' className='search' style={{marginTop: 3}} value={search} onChange={(evt)=>{onSearch({search: evt.target.value})}} />\n                <Dropdown.Menu scrolling>\n                  {operations.map(option => (\n                    <Dropdown.Item key={option.value} {...option} onClick={(evt, data)=>{onChange({id: data.value})}} />\n                  ))}\n                </Dropdown.Menu>\n              </Dropdown.Menu>\n            </Dropdown>\n          :\n            <Dropdown\n              onClick={() => {onAdd()}}\n              text={'Add New Operation'}\n              icon='filter'\n              floating\n              labeled\n              button\n              className='icon' />\n        }\n        <View style={{flex: 1}} />\n      </View>\n    </View>\n  )\n})\n","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreIcon from '@material-ui/icons/MoreHoriz';\nimport {View} from 'react-native'\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect(\n  {\n    onAddField: sequences`TopBar.onAddField`,\n    onConnect: sequences`TopBar.onConnect`,\n  },\n  function MoreDropdown({style, onAddField, onConnect}) {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    function handleClick(event) {\n      setAnchorEl(event.currentTarget);\n    }\n    function handleClose() {\n      setAnchorEl(null);\n    }\n    return (\n      <View style={style}>\n        <IconButton edge=\"end\" color=\"inherit\" aria-label=\"Menu\" onClick={handleClick}>\n          <MoreIcon  />\n        </IconButton>\n        <Menu\n          style={{top: 50, right: 5}}\n          open={Boolean(anchorEl)}\n          keepMounted\n          anchorEl={anchorEl}\n          onClose={handleClose}>\n            <MenuItem onClick={()=>{handleClose(); onAddField()}}>Add Field</MenuItem>\n            <MenuItem onClick={()=>{handleClose(); onConnect()}}>Connect to OADA</MenuItem>\n        </Menu>\n      </View>\n    );\n  }\n)\n","import React from 'react';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Button from '@material-ui/core/Button';\n\nimport IconButton from '@material-ui/core/IconButton';\nimport ListIcon from '@material-ui/icons/Menu';\n\nimport OperationDropdown from './OperationDropdown';\nimport MoreDropdown from './MoreDropdown';\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect(\n  {\n    toggleTitle: sequences`toggleTitle`,\n  },\n  function NormalToolbar({toggleTitle}) {\n    return (\n      <Toolbar>\n        <IconButton edge=\"start\" style={{marginRight: 7}} color=\"inherit\" aria-label=\"Menu\" onClick={()=>{toggleTitle()}}>\n          <ListIcon />\n        </IconButton>\n        <OperationDropdown style={{flex: 1}} />\n        <Button color=\"inherit\">2019</Button>\n        <MoreDropdown />\n      </Toolbar>\n    );\n  }\n)\n","import React, {Component} from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport {View} from 'react-native'\n\nimport DrawingToolbar from './DrawingToolbar';\nimport NormalToolbar from './NormalToolbar';\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect(\n  {\n    drawing: state`Map.BoundaryDrawing.drawing`,\n  },\n  function TopBar({drawing}) {\n    return (\n      <View style={{zIndex: 1201}}>\n        <AppBar position=\"static\">\n          {\n            drawing ? <DrawingToolbar /> : <NormalToolbar />\n          }\n        </AppBar>\n      </View>\n    );\n  }\n)\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Text, View } from 'react-native';\n\n\nexport default function TemporaryDrawer() {\n  return (\n    <Drawer open={false} variant=\"persistent\">\n      <View style={{height: 64}} />\n      <div\n        style={{width: 250}}\n        role=\"presentation\">\n        <List>\n          {['Inbox', 'Starred', 'Send email'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <List>\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\n            <ListItem button key={text}>\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\n              <ListItemText primary={text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    </Drawer>\n  );\n}\n","import React from 'react';\nimport Drawer from '@material-ui/core/Drawer';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport {View, Text} from 'react-native';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport _ from 'lodash';\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect(\n  {\n    open: state`FieldDetails.open`,\n    field: state`FieldDetails.field`,\n    onStatusChange: sequences`FieldDetails.onStatusChange`,\n    onEditFieldClick: sequences`FieldDetails.onEditFieldClick`,\n  }, function FieldDetails({open, field, onStatusChange, onEditFieldClick}) {\n    if (!Boolean(field)) {\n      open = false;\n      field = {};\n    }\n    return (\n      <Drawer anchor=\"bottom\" open={open} variant=\"persistent\">\n        <View style={{paddingBottom: 20}}>\n          <View style={{justifyContent: 'center', flexDirection: 'row', alignItems: 'center'}}>\n              <Text style={{fontWeight: 'bold', fontSize: 20}}>{field.name}</Text>\n              {<Text style={{marginLeft: 7, fontSize: 20}}>{`- ${Math.round(field.acres)} ac`}</Text>}\n            <IconButton onClick={()=>{onEditFieldClick()}}>\n              <EditIcon fontSize=\"small\" />\n            </IconButton>\n          </View>\n          <View style={{justifyContent: 'center', flexDirection: 'row'}}>\n            <FormControl component=\"fieldset\">\n              <FormGroup aria-label=\"position\" name=\"position\" row>\n                <FormControlLabel\n                  value=\"bottom\"\n                  control={<Checkbox color=\"primary\" checked={(field.status == \"planned\") || false} onChange={()=>{onStatusChange({status: 'planned'})}} />}\n                  label=\"Planned\"\n                  labelPlacement=\"bottom\"\n                />\n                <FormControlLabel\n                  value=\"bottom\"\n                  control={<Checkbox color=\"primary\" checked={(field.status == \"started\") || false} onChange={()=>{onStatusChange({status: 'started'})}} />}\n                  label=\"Started\"\n                  labelPlacement=\"bottom\"\n                />\n                <FormControlLabel\n                  value=\"bottom\"\n                  control={<Checkbox color=\"primary\" checked={(field.status == \"done\") || false} onChange={()=>{onStatusChange({status: 'done'})}} />}\n                  label=\"Done\"\n                  labelPlacement=\"bottom\"\n                />\n              </FormGroup>\n            </FormControl>\n          </View>\n        </View>\n      </Drawer>\n    );\n  }\n)\n","import React, { Component } from 'react';\nimport { Text, View } from 'react-native';\n\nimport { state } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect({\n  selectedOperation: state`TopBar.OperationDropdown.selectedOperation`,\n  acresStatus: state`acresStatus`,\n}, function AcresPlanned({acresStatus, selectedOperation}) {\n  if (selectedOperation == null) return null;\n  return (\n    <View style={{backgroundColor: '#c50003', paddingLeft: 7, paddingRight: 7, paddingTop: 5, paddingBottom: 5, borderRadius: 5}}>\n      <Text style={{color: 'white', textShadowColor: '#000', textShadowOffset: {width: 1, height: 1}, textShadowRadius: 2}}>\n        {`${acresStatus.planned} ac (${acresStatus.plannedPercentage}%)`}\n      </Text>\n    </View>\n  );\n});\n","import React, { Component } from 'react';\nimport { Text, View } from 'react-native';\n\nimport { state } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect({\n  selectedOperation: state`TopBar.OperationDropdown.selectedOperation`,\n  acresStatus: state`acresStatus`,\n}, function AcresStarted({acresStatus, selectedOperation}) {\n  if (selectedOperation == null) return null;\n  return (\n    <View style={{backgroundColor: '#eeb705', paddingLeft: 7, paddingRight: 7, paddingTop: 5, paddingBottom: 5, borderRadius: 5, marginRight: 7, marginLeft: 7}}>\n      <Text style={{color: 'white', textShadowColor: '#000', textShadowOffset: {width: 1, height: 1}, textShadowRadius: 2}}>\n        {`${acresStatus.started} ac (${acresStatus.startedPercentage}%)`}\n      </Text>\n    </View>\n  );\n});\n","import React, { Component } from 'react';\nimport { Text, View } from 'react-native';\n\nimport { state } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect({\n  selectedOperation: state`TopBar.OperationDropdown.selectedOperation`,\n  acresStatus: state`acresStatus`,\n}, function AcresDone({acresStatus, selectedOperation}) {\n  if (selectedOperation == null) return null;\n  return (\n    <View style={{backgroundColor: '#5bb25f', paddingLeft: 7, paddingRight: 7, paddingTop: 5, paddingBottom: 5, borderRadius: 5}}>\n      <Text style={{color: 'white', textShadowColor: '#000', textShadowOffset: {width: 1, height: 1}, textShadowRadius: 2}}>\n        {`${acresStatus.done} ac (${acresStatus.donePercentage}%)`}\n      </Text>\n    </View>\n  );\n});\n","import React, { Component } from 'react';\nimport { Text, View } from 'react-native';\n\nimport AcresPlanned from './AcresPlanned'\nimport AcresStarted from './AcresStarted'\nimport AcresDone from './AcresDone'\n\nexport default class AcresStatus extends Component {\n  render() {\n    return (\n      //z-index of leaflet map is 400\n      <View style={{position: \"absolute\", display: \"flex\", flexDirection: 'row', justifyContent: \"center\", alignItems: \"center\", top: 68, zIndex: 401, width: '100vw'}}>\n        <AcresPlanned />\n        <AcresStarted />\n        <AcresDone />\n      </View>\n    );\n  }\n}\n","import React from 'react';\nimport {View} from 'react-native'\nimport { Button, Modal, Input } from 'semantic-ui-react'\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect(\n  {\n    open: state`Modals.SaveField.open`,\n    name: state`Modals.SaveField.name`,\n    onNameChange: sequences`Modals.SaveField.onNameChange`,\n    onCancel: sequences`Modals.SaveField.onCancel`,\n    onSave: sequences`Modals.SaveField.onSave`\n  },\n  function SaveField({ open, name, onNameChange, onCancel, onSave }) {\n    return (\n      <Modal open={open} size='tiny'>\n        <Modal.Header>New Field</Modal.Header>\n        <Modal.Content>\n          <p>Field Name:</p>\n          <Input placeholder='Back 40' value={name} onChange={(evt) => {onNameChange({name: evt.target.value})}} />\n        </Modal.Content>\n        <Modal.Actions>\n          <Button negative onClick={() => onCancel()}>Cancel</Button>\n          <Button positive icon='checkmark' labelPosition='right' content='Save' onClick={() => onSave()} />\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n)\n","import React from 'react';\nimport {View, Text} from 'react-native'\nimport { Button, Modal, Input } from 'semantic-ui-react'\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect(\n  {\n    open: state`Modals.OADADomain.open`,\n    domain: state`Modals.OADADomain.domain`,\n    onDomainChange: sequences`Modals.OADADomain.onDomainChange`,\n    onCancel: sequences`Modals.OADADomain.onCancel`,\n    onConnect: sequences`Modals.OADADomain.onConnect`\n  },\n  function OADADomain({ open, domain, onDomainChange, onCancel, onConnect }) {\n    return (\n      <Modal open={open} size='tiny'>\n        <Modal.Header>Connect to OADA Server</Modal.Header>\n        <Modal.Content>\n          <Text>Domain:</Text>\n          <View style={{flexDirection: 'row'}}>\n            <Input style={{flex: 1, marginTop: 7}} placeholder='https://oada.openatk.com' value={domain} onChange={(evt) => {onDomainChange({domain: evt.target.value})}} />\n          </View>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button negative onClick={() => onCancel()}>Cancel</Button>\n          <Button positive icon='checkmark' labelPosition='right' content='Connect' onClick={() => onConnect({})} />\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n)\n","import React from 'react';\nimport {View, Text} from 'react-native'\nimport { Button, Modal, Input } from 'semantic-ui-react'\n\nimport { state, sequences } from 'cerebral'\nimport { connect } from '@cerebral/react'\n\nexport default connect(\n  {\n    open: state`Modals.NewOperation.open`,\n    name: state`Modals.NewOperation.name`,\n    onNameChange: sequences`Modals.NewOperation.onNameChange`,\n    onCancel: sequences`Modals.NewOperation.onCancel`,\n    onSave: sequences`Modals.NewOperation.onSave`\n  },\n  function NewOperation({ open, name, onNameChange, onCancel, onSave }) {\n    return (\n      <Modal open={open} size='tiny'>\n        <Modal.Header>New Operation</Modal.Header>\n        <Modal.Content>\n          <Text>Name:</Text>\n          <View style={{flexDirection: 'row'}}>\n            <Input style={{flex: 1, marginTop: 7}} placeholder='Corn Planting' value={name} onChange={(evt) => {onNameChange({name: evt.target.value})}} />\n          </View>\n        </Modal.Content>\n        <Modal.Actions>\n          <Button negative onClick={() => onCancel()}>Cancel</Button>\n          <Button positive icon='checkmark' labelPosition='right' content='Save' onClick={() => onSave()} />\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n)\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Map from './Map'\nimport TopBar from './TopBar'\nimport FieldList from './FieldList'\nimport FieldDetails from './FieldDetails'\nimport AcresStatus from './AcresStatus'\n\nimport ModalSaveField from './Modals/SaveField';\nimport ModalOADADomain from './Modals/OADADomain';\nimport ModalNewOperation from './Modals/NewOperation';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopBar />\n      <AcresStatus />\n      <Map />\n      <FieldList />\n      <FieldDetails />\n      <ModalSaveField />\n      <ModalOADADomain />\n      <ModalNewOperation />\n    </div>\n  );\n}\n\nexport default App;\n","import { sequences } from \"cerebral\";\n\nfunction onAddField({get}) {\n  get(sequences`Map.BoundaryDrawing.onStartDrawing`)()\n}\nexport default [\n  onAddField\n]\n","import { sequences } from \"cerebral\";\n\nfunction openSaveFieldModal({get}) {\n  get(sequences`Modals.SaveField.onOpen`)()\n}\n\nexport default [\n  openSaveFieldModal\n]\n","import { sequences } from \"cerebral\";\n\nfunction onCancelField({get}) {\n  get(sequences`Map.BoundaryDrawing.onStopDrawing`)()\n}\nexport default [\n  onCancelField\n]\n","import { sequences } from \"cerebral\";\n\nfunction openOADADomainModal({get}) {\n  get(sequences`Modals.OADADomain.onOpen`)()\n}\n\nexport default [\n  openOADADomainModal\n]\n","import { sequences } from \"cerebral\";\n\nfunction openNewOperationModal({get}) {\n  get(sequences`Modals.NewOperation.onOpen`)()\n}\n\nexport default [\n  openNewOperationModal\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState, props } from \"cerebral\";\n\nexport default [\n  set(moduleState`selected`, props`id`),\n  set(moduleState`open`, false)\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState, props } from \"cerebral\";\n\nexport default [\n  set(moduleState`open`, props`open`)\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState, props } from \"cerebral\";\n\nexport default [\n  set(moduleState`search`, props`search`)\n]\n","/*\n  Get operations, filtering by search\n*/\n\nimport { moduleState, state } from 'cerebral'\nimport _ from 'lodash';\n\nexport const operationList = (get) => {\n  let operations = null;\n  if (get(state`OADAManager.connected`) == true) {\n    let currentConnection = get(state`OADAManager.currentConnection`)\n    operations = get(state`oada.${currentConnection}.bookmarks.seasons.2019.operations`); //TODO year\n  } else {\n    operations = get(state`localData.abc123.seasons.2019.operations`) //TODO year, organization\n  }\n  const selectedOperation = get(state`TopBar.OperationDropdown.selected`) //Can't use moduleState here or won't rerun when change occurs\n  const search = get(state`TopBar.OperationDropdown.search`) //Can't use moduleState here or won't rerun when change occurs\n  return _.compact(_.map(operations, ({name, id}) => {\n    if (id == null) return null; //Not an operation, a _key for oada\n    if (search != '' && name.search(search) == -1) return null;\n    return {\n      text: name,\n      value: id,\n      selected: (selectedOperation == id),\n      label: { color: 'green', empty: true, circular: true }\n    }\n  }))\n}\n\nexport const selectedOperation = (get) => {\n  let operations = null;\n  if (get(state`OADAManager.connected`) == true) {\n    let currentConnection = get(state`OADAManager.currentConnection`)\n    operations = _.omitBy(get(state`oada.${currentConnection}.bookmarks.seasons.2019.operations`) || {}, (o, k) => {return _.startsWith(k, '_')}); //TODO year\n  } else {\n    operations = get(state`localData.abc123.seasons.2019.operations`) //TODO year, organization\n  }\n  const selectedOperation = get(state`TopBar.OperationDropdown.selected`) //Can't use moduleState here or won't rerun when change occurs\n  if (selectedOperation == null && _.keys(operations).length > 0) return operations[_.keys(operations)[0]];\n  return operations[selectedOperation];\n}\n","import { state } from \"cerebral\";\nimport { set } from \"cerebral/factories\";\n\nimport onAddField from './sequences/onAddField';\nimport onSaveField from './sequences/onSaveField';\nimport onCancelField from './sequences/onCancelField';\nimport onConnect from './sequences/onConnect';\nimport OperationDropdown from './modules/OperationDropdown';\n\nexport default {\n  state: {\n\n  },\n  sequences: {\n    onAddField,\n    onSaveField,\n    onCancelField,\n    onConnect\n  },\n  modules: {\n    OperationDropdown\n  }\n};\n","import { state } from \"cerebral\";\nimport { set } from \"cerebral/factories\";\n\nimport onAdd from './sequences/onAdd';\nimport onChange from './sequences/onChange';\nimport onOpenChange from './sequences/onOpenChange';\nimport onSearch from './sequences/onSearch';\n\nimport {operationList, selectedOperation} from './computed/operations';\n\nexport default {\n  state: {\n    open: false,\n    selected: null,\n    search: '',\n\n    list: operationList,\n    selectedOperation\n  },\n  sequences: {\n    onAdd,\n    onChange,\n    onOpenChange,\n    onSearch\n  }\n};\n","export default {\n  bookmarks: {\n    _type: \"application/vnd.oada.bookmarks.1+json\",\n    _rev: 0,\n    fields: {\n      _type: \"application/vnd.oada.fields.1+json\",\n      _rev: 0,\n      \"*\": {\n        _type: \"application/vnd.oada.field.1+json\",\n        _rev: 0\n      }\n    },\n    seasons: {\n      _type: \"application/vnd.oada.seasons.1+json\",\n      _rev: 0,\n      \"*\": {\n        _type: \"application/vnd.oada.season.1+json\",\n        _rev: 0,\n        fields: {\n          _type: \"application/vnd.oada.fields.1+json\",\n          _rev: 0,\n          \"*\": {\n            _type: \"application/vnd.oada.field.1+json\",\n            _rev: 0,\n            operations: {\n              _type: \"application/vnd.oada.operations.1+json\",\n              _rev: 0,\n              \"*\": {\n                _type: \"application/vnd.oada.operation.1+json\",\n                _rev: 0\n              }\n            }\n          }\n        },\n        operations: {\n          _type: \"application/vnd.oada.operations.1+json\",\n          _rev: 0,\n          \"*\": {\n            _type: \"application/vnd.oada.operation.1+json\",\n            _rev: 0\n          }\n        }\n      }\n    }\n  }\n};\n","/*\n  - Convert field from boundary drawing to GEOJSON\n  - Push new field to main field list\n  - Push new field to all operations in the current year\n*/\n\nimport { state, moduleState } from \"cerebral\";\nimport { set, when } from 'cerebral/factories'\nimport _ from 'lodash';\nimport uuid from 'uuid/v1'\nimport oada from \"@oada/cerebral-module/sequences\";\nimport tree from \"../../../OADAManager/tree\";\n\nfunction convertToGEOJSON({get}) {\n  const points = get(state`Map.BoundaryDrawing.boundary`)\n  var boundary = {\n    type: \"Polygon\",\n    \"coordinates\": [_.map(points, (p) => {return [p[1], p[0]]})] //Flip lat/lng and add array around\n  }\n  return {boundary}\n}\nfunction createField({get, props}) {\n  var field = {\n    id: uuid(),\n    name: get(moduleState`name`),\n    boundary: props.boundary\n  }\n  console.log('NewField', JSON.stringify(field, 2));\n  return {field}\n}\nfunction addFieldToLocalData({store, props, get}) {\n  let field = props.field;\n  store.set(state`localData.abc123.fields.${field.id}`, field); //TODO organization\n  store.set(state`localData.abc123.seasons.2019.fields.${field.id}`, {...field, operations: {}, year: '2019'}); //TODO year, organization\n}\nfunction addFieldToOADA({props, get}) {\n  let field = props.field;\n  //Add to OADA\n  let requests = [\n    {\n      tree,\n      data: field,\n      path: `/bookmarks/fields/${field.id}`\n    },\n    {\n      tree,\n      data: {...field, operations: {}, year: '2019'},\n      path: `/bookmarks/seasons/2019/fields/${field.id}`\n    }\n  ];\n  let currentConnection = get(state`OADAManager.currentConnection`)\n  return {requests, connection_id: currentConnection};\n}\n\nexport default [\n  convertToGEOJSON,\n  createField,\n  when(state`OADAManager.connected`),\n  {\n    true: [\n      addFieldToOADA,\n      oada.put\n    ],\n    false: [\n      addFieldToLocalData\n    ]\n  }\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState, props, sequences } from \"cerebral\";\n\nimport saveField from './actions/saveField';\nimport open from './actions/open';\n\nfunction stopDrawing({get}) {\n  get(sequences`Map.BoundaryDrawing.onStopDrawing`)(props)\n}\n\nexport default {\n  state: {\n    open: false,\n    name: ''\n  },\n  sequences: {\n    onOpen: [\n      open\n    ],\n    onNameChange: [\n      set(moduleState`name`, props`name`),\n    ],\n    onSave: [\n      saveField,\n      stopDrawing,\n      set(moduleState`open`, false)\n    ],\n    onCancel: [\n      stopDrawing,\n      set(moduleState`open`, false),\n    ]\n  }\n};\n","import { set } from 'cerebral/factories'\nimport { moduleState } from \"cerebral\";\n\nexport default [\n  set(moduleState`name`, ''),\n  set(moduleState`open`, true)\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState } from \"cerebral\";\n\nexport default [\n  set(moduleState`domain`, 'https://localhost'), //TODO remove default\n  set(moduleState`open`, true)\n]\n","import { moduleState, sequences } from 'cerebral'\nimport { set } from 'cerebral/factories'\n\nfunction notifyDomainChanged({get}) {\n  var domain = get(moduleState`domain`);\n  get(sequences`OADAManager.onDomainChanged`)({domain})\n}\n\nexport default [\n  notifyDomainChanged,\n  set(moduleState`open`, false)\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState, props, sequences } from \"cerebral\";\n\nimport open from './actions/open';\nimport onConnectClick from './sequences/onConnectClick';\n\n\nexport default {\n  state: {\n    open: false,\n    domain: ''\n  },\n  sequences: {\n    onDomainChange: [\n      set(moduleState`domain`, props`domain`),\n    ],\n    onOpen: [\n      open\n    ],\n    onConnect: onConnectClick,\n    onCancel: [\n      set(moduleState`open`, false),\n    ]\n  }\n};\n","import { set } from 'cerebral/factories'\nimport { moduleState } from \"cerebral\";\n\nexport default [\n  set(moduleState`name`, ''),\n  set(moduleState`open`, true)\n]\n","/*\n  - Create new id for operation\n  - Copy fields from master fields list\n*/\n\n\nimport { set, when } from 'cerebral/factories'\nimport { moduleState, state, props } from \"cerebral\";\nimport _ from 'lodash';\nimport uuid from 'uuid/v1'\nimport oada from \"@oada/cerebral-module/sequences\";\nimport tree from '../../../OADAManager/tree'\n\nfunction createOperation({get, props}) {\n  var operation = {\n    id: uuid(),\n    year: '2019',\n    name: get(moduleState`name`),\n    fields: {}\n  }\n  return {operation};\n}\n\nfunction addOperationToLocalData({store, props}) {\n  let operation = props.operation;\n  store.set(state`localData.abc123.seasons.2019.operations.${operation.id}`, operation); //TODO year, organization\n}\nfunction addOperationToOADA({props, get}) {\n  let operation = props.operation;\n  //Add to OADA\n  let requests = [\n    {\n      tree,\n      data: operation,\n      path: `/bookmarks/seasons/2019/operations/${operation.id}` //TODO year\n    }\n  ];\n  let currentConnection = get(state`OADAManager.currentConnection`)\n  return {requests, connection_id: currentConnection};\n}\n\nexport default [\n  createOperation,\n  when(state`OADAManager.connected`),\n  {\n    true: [\n      addOperationToOADA,\n      oada.put\n    ],\n    false: [\n      addOperationToLocalData\n    ]\n  },\n  set(state`TopBar.OperationDropdown.selected`, props`operation.id`)\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState, props, sequences } from \"cerebral\";\n\nimport open from './actions/open';\nimport saveOperation from './actions/saveOperation';\n\nexport default {\n  state: {\n    open: false,\n    name: ''\n  },\n  sequences: {\n    onNameChange: [\n      set(moduleState`name`, props`name`),\n    ],\n    onOpen: [\n      open\n    ],\n    onSave: [\n      saveOperation,\n      set(moduleState`open`, false)\n    ],\n    onCancel: [\n      set(moduleState`open`, false),\n    ]\n  }\n};\n","import SaveField from './SaveField'\nimport OADADomain from './OADADomain'\nimport NewOperation from './NewOperation'\n\nexport default {\n  state: {\n\n  },\n  sequences: {\n\n  },\n  modules: {\n    SaveField,\n    OADADomain,\n    NewOperation\n  }\n};\n","/*\n  Increase stroke size on field\n*/\nimport { moduleState } from 'cerebral'\n\nfunction highlightFieldFactory(fieldId) {\n  function highlightField({ store, get }) {\n    if (get(fieldId) != null) store.set(moduleState`fieldStyles.${fieldId}`, {weight: 5});\n  }\n  return highlightField\n}\nfunction unhighlightFieldFactory(fieldId) {\n  function unhighlightField({ store, get }) {\n    if (get(fieldId) != null) store.set(moduleState`fieldStyles.${fieldId}`, {weight: 3});\n  }\n  return unhighlightField\n}\n\nexport default {\n  highlight: highlightFieldFactory,\n  unhighlight: unhighlightFieldFactory\n}\n","/*\n  Adds a point to the current boundary being drawn\n*/\nimport { moduleState } from 'cerebral'\nimport uuid from 'uuid/v1'\n\nfunction addPointToBoundary({store, props}) {\n  store.set(moduleState`boundary.${uuid()}`, [props.lat, props.lng]);\n}\n\nexport default [\n  addPointToBoundary\n]\n","/*\n  Get fields\n*/\n\nimport { state } from 'cerebral'\n\nexport default function seasonFields (get) {\n  let fields = [];\n  if (get(state`OADAManager.connected`) == true) {\n    let currentConnection = get(state`OADAManager.currentConnection`)\n    fields = get(state`oada.${currentConnection}.bookmarks.seasons.2019.fields`) //TODO year\n  } else {\n    fields = get(state`localData.abc123.seasons.2019.fields`) //TODO year, organization\n  }\n  return fields;\n}\n","/*\n  Get fields adding in display info\n*/\n\nimport { moduleState, state } from 'cerebral'\nimport _ from 'lodash';\nimport seasonFields from '../../../computed/seasonFields';\n\nexport const fields = (get) => {\n  const fieldStyles = get(state`Map.fieldStyles`)\n  const selectedField = get(state`Map.selectedField`)\n  const drawingBoundary = get(state`Map.BoundaryDrawing.drawing`)\n  const operation = get(state`TopBar.OperationDropdown.selectedOperation`)\n  const fieldsToRender = seasonFields(get);\n  return _.map(fieldsToRender, (field, id) => {\n    if (_.startsWith(id, '_')) return false;\n    if (selectedField == id && drawingBoundary) return false;\n    var styledField = _.clone(field);\n    //Add any styles\n    if (fieldStyles[id] != null) styledField.style = fieldStyles[id];\n    //Fill based on status of current operation\n    if (operation) {\n      var color = \"white\"\n      if (operation.fields[id]) {\n        if (operation.fields[id].status == 'planned') color = 'red'\n        if (operation.fields[id].status == 'started') color = 'orange'\n        if (operation.fields[id].status == 'done') color = 'green'\n      }\n      styledField.style = _.merge({}, styledField.style, {fillColor: color, color})\n    }\n    return styledField;\n  })\n}\n","import onFieldClick from './sequences/onFieldClick'\nimport onMapClick from './sequences/onMapClick'\nimport BoundaryDrawing from './modules/BoundaryDrawing'\n\nimport {fields} from './computed/fields'\nexport default {\n  state: {\n    fieldStyles: {},\n    selectedField: null,\n    fields\n  },\n  sequences: {\n    onFieldClick,\n    onMapClick\n  },\n  modules: {\n    BoundaryDrawing\n  }\n};\n","import styleField from '../actions/styleField'\n\nimport { props, moduleState, state, sequences } from 'cerebral'\nimport { set } from 'cerebral/factories'\n\nfunction openFieldDetails({get}) {\n  get(sequences`FieldDetails.onOpen`)()\n}\nfunction isDrawing({path, get}) {\n  //Is drawing a field\n  const drawing = get(state`Map.BoundaryDrawing.drawing`);\n  if (drawing) return path.true();\n  return path.false();\n}\n\nexport default [\n  isDrawing,\n  {\n    true: [],\n    false: [\n      styleField.unhighlight(moduleState`selectedField`),\n      set(moduleState`selectedField`, props`id`),\n      styleField.highlight(props`id`),\n      openFieldDetails\n    ]\n  }\n]\n","import styleField from '../actions/styleField'\n\nimport { props, moduleState, state, sequences } from 'cerebral'\nimport { set, sequence } from 'cerebral/factories'\n\nfunction fieldIsSelected({path, get}) {\n  const selectedField = get(moduleState`selectedField`);\n  if (selectedField == null) return path.false();\n  return path.true();\n}\nfunction isDrawing({path, get}) {\n  //Is drawing a field\n  const drawing = get(state`Map.BoundaryDrawing.drawing`);\n  if (drawing) return path.true();\n  return path.false();\n}\nfunction closeFieldDetails({get}) {\n  get(sequences`FieldDetails.onClose`)()\n}\n\nfunction callForModules({get, props}) {\n  get(sequences`Map.BoundaryDrawing.onMapClick`)(props)\n}\n\nexport default sequence('Map.onMapClick', [\n  fieldIsSelected,\n  {\n    true: [\n      isDrawing,\n      {\n        true: [], //We are editing a field\n        false: [\n          closeFieldDetails,\n          styleField.unhighlight(moduleState`selectedField`),\n          set(moduleState`selectedField`, null),\n        ]\n      }\n    ],\n    false: [\n\n    ]\n  },\n  callForModules\n])\n","import { state } from \"cerebral\";\nimport { set } from \"cerebral/factories\";\n\nimport onMapClick from './sequences/onMapClick';\nimport onMarkerMove from './sequences/onMarkerMove';\nimport onStartDrawing from './sequences/onStartDrawing';\nimport onStopDrawing from './sequences/onStopDrawing';\n\nexport default {\n  state: {\n    boundary: {},\n    drawing: false\n  },\n  sequences: {\n    onMapClick,\n    onMarkerMove,\n    onStartDrawing,\n    onStopDrawing\n  }\n};\n","/*\n  If drawing a field:\n    - add point to boundary.\n*/\n\nimport { moduleState } from 'cerebral'\nimport { equals, sequence } from 'cerebral/factories'\nimport addPointToBoundary from '../actions/addPointToBoundary'\n\nfunction isDrawingBoundary({get, path}) {\n  if (get(moduleState`drawing`) == true) return path.true();\n  return path.false();\n}\n\nexport default sequence('boundaryDrawing.onMapClick', [\n  isDrawingBoundary,\n  {\n    true: [\n      addPointToBoundary\n    ],\n    false: []\n  }\n])\n","/*\n  \n*/\nimport updateBoundaryPoint from '../actions/updateBoundaryPoint'\n\nexport default [\n  updateBoundaryPoint\n]\n","/*\n  Updates old coordinate to new coordinate\n*/\nimport { moduleState } from 'cerebral'\nimport _ from 'lodash'\nimport { debounce } from 'cerebral/factories'\n\nfunction updateBoundaryPoint({store, props}) {\n  //Find matching coord\n  store.set(moduleState`boundary.${props.id}`, [props.latlng.lat, props.latlng.lng]);\n}\n\nexport default [\n  debounce(10),\n  {\n    continue: updateBoundaryPoint,\n    discard: []\n  }\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState } from \"cerebral\";\n\nfunction prepBoundary({props, store}) {\n  let boundary = props.boundary || {};\n  store.set(moduleState`boundary`, boundary)\n}\n\nexport default [\n  prepBoundary,\n  set(moduleState`drawing`, true)\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState } from \"cerebral\";\n\nexport default [\n  set(moduleState`drawing`, false),\n  set(moduleState`boundary`, {})\n]\n","import { state, props } from 'cerebral'\nimport _ from 'lodash';\nimport { when, set } from 'cerebral/factories'\nimport oada from \"@oada/cerebral-module/sequences\";\nimport tree from \"../../OADAManager/tree.js\"\n\nfunction changeLocalFieldStatus({get, props, store}) {\n  const selectedFieldId = get(state`Map.selectedField`);\n  const operation = get(state`TopBar.OperationDropdown.selectedOperation`) //Can't use moduleState here or won't rerun when change occurs\n  var field = _.clone(get(state`localData.abc123.seasons.2019.operations.${operation.id}.fields.${selectedFieldId}`)) || {}; //TODO year, organization\n  var newStatus = props.status;\n  if (field.status == props.status) newStatus = null; //Unchecking\n  field.status = newStatus;\n  if (field.status == null) {\n    //Remove field from operation\n    store.unset(state`localData.abc123.seasons.2019.operations.${operation.id}.fields.${selectedFieldId}`) //TODO year, organization\n    //Remove operation from season's field's operation list\n    store.unset(state`localData.abc123.seasons.2019.fields.${selectedFieldId}.operations.${operation.id}`) //TODO year, organization\n  } else {\n    //Add field to operation\n    store.set(state`localData.abc123.seasons.2019.operations.${operation.id}.fields.${selectedFieldId}`, field) //TODO year, organization\n    //Create operations key on season's field list if doesn't exist\n    if (get(state`localData.abc123.seasons.2019.fields.${selectedFieldId}.operations`) == null) store.set(state`localData.abc123.seasons.2019.fields.${selectedFieldId}.operations`, {}) //TODO year, organization\n    //Add operation to field in season's field's operation list\n    store.set(state`localData.abc123.seasons.2019.fields.${selectedFieldId}.operations.${operation.id}`, {}) //TODO year, organization\n  }\n}\n\nfunction changeOADAFieldStatus({get, props, path}) {\n  const selectedFieldId = get(state`Map.selectedField`);\n  const operation = get(state`TopBar.OperationDropdown.selectedOperation`) //Can't use moduleState here or won't rerun when change occurs\n\n  let currentConnection = get(state`OADAManager.currentConnection`)\n  var field = _.clone(get(state`oada.${currentConnection}.bookmarks.seasons.2019.operations.${operation.id}.fields.${selectedFieldId}`)) || {}; //TODO year, organization\n  var newStatus = props.status;\n  if (field.status == props.status) newStatus = null; //Unchecking\n  field.status = newStatus;\n\n  if (field.status == null) {\n    let requests = [\n      {  //Remove field to operation\n        type: 'application/vnd.oada.operation.1+json', //TODO oada.put should handle this\n        path: `/bookmarks/seasons/2019/operations/${operation.id}/fields/${selectedFieldId}` //TODO year\n      },\n      { //Remove operation to field in season's field's operation list\n        type: 'application/vnd.oada.field.1+json',\n        path: `/bookmarks/seasons/2019/fields/${selectedFieldId}/operations/${operation.id}` //TODO year\n      }\n    ];\n    return path.delete({requests, connection_id: currentConnection});\n  } else {\n    let requests = [\n      {  //Add field to operation\n        tree,\n        data: field,\n        type: 'application/vnd.oada.operation.1+json', //TODO oada.put should handle this\n        path: `/bookmarks/seasons/2019/operations/${operation.id}/fields/${selectedFieldId}` //TODO year\n      },\n      { //Add operation to field in season's field's operation list\n        tree,\n        data: {_id: operation._id}, //TODO include link to operation\n        type: 'application/vnd.oada.field.1+json',\n        path: `/bookmarks/seasons/2019/fields/${selectedFieldId}/operations/${operation.id}` //TODO year\n      }\n    ];\n    return path.put({requests, connection_id: currentConnection});\n  }\n}\n\nexport default [\n  when(state`OADAManager.connected`),\n  {\n    true: [\n      changeOADAFieldStatus,\n      {\n        put: [oada.put],\n        delete: [oada.delete]\n      }\n    ],\n    false: [\n      changeLocalFieldStatus\n    ]\n  }\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState, props } from \"cerebral\";\n\nimport changeFieldStatus from '../actions/changeFieldStatus';\n\n\nexport default [\n  //set(moduleState`selected`, props`id`),\n  //set(moduleState`open`, false)\n  changeFieldStatus\n]\n","/*\n  Get selected field and it's info\n*/\n\nimport { state } from 'cerebral'\nimport _ from 'lodash';\nimport geojsonArea from '@mapbox/geojson-area';\n\nexport default function field (get) {\n  const selectedFieldId = get(state`Map.selectedField`);\n  const operation = get(state`TopBar.OperationDropdown.selectedOperation`) //Can't use moduleState here or won't rerun when change occurs\n  if (operation == null) return null;\n  const status = _.get(operation.fields[selectedFieldId], 'status');\n\n  let field = null;\n  if (get(state`OADAManager.connected`) == true) {\n    let currentConnection = get(state`OADAManager.currentConnection`)\n    field = get(state`oada.${currentConnection}.bookmarks.seasons.2019.fields.${selectedFieldId}`); //TODO year\n  } else {\n    field = get(state`localData.abc123.seasons.2019.fields.${selectedFieldId}`); //TODO year, organization\n  }\n  if (field == null) return null;\n  const acres = geojsonArea.geometry(field.boundary) * 0.000247105 //Meters to acres;\n  return _.merge({}, field, {status, acres});\n}\n","import { sequences } from \"cerebral\";\nimport field from '../computed/field';\nimport _ from 'lodash';\nimport uuid from 'uuid/v1'\n\nfunction onEditFieldClick({get}) {\n  //Get current field boundary\n  let currentField = field(get);\n  //Convert to drawing boundary: {<rand-id>: [lat, lng], ...}\n  let boundary = {};\n  _.forEach(_.get(currentField, 'boundary.coordinates.0') || [], (coors) => { //TODO will not work with holes in fields etc\n    boundary[uuid()] = [coors[1], coors[0]];\n  });\n  //Hide current field boundary from map\n  get(sequences`Map.BoundaryDrawing.onStartDrawing`)({boundary})\n}\n\n\nexport default [\n  onEditFieldClick\n]\n","import { set } from 'cerebral/factories'\nimport { moduleState } from \"cerebral\";\n\nexport default [\n  set(moduleState`open`, false)\n]\n","import onStatusChange from './sequences/onStatusChange'\nimport onEditFieldClick from './sequences/onEditFieldClick'\n\nimport field from './computed/field'\nimport open from './actions/open';\nimport close from './actions/close';\n\nexport default {\n  state: {\n    open: false,\n    field\n  },\n  sequences: {\n    onStatusChange,\n    onEditFieldClick,\n    onOpen: [\n      open\n    ],\n    onClose: [\n      close\n    ]\n  }\n};\n","import { set } from 'cerebral/factories'\nimport { moduleState } from \"cerebral\";\n\nexport default [\n  set(moduleState`open`, true)\n]\n","import oada from \"@oada/cerebral-module/sequences\";\nimport { moduleState, state, props, sequences } from \"cerebral\";\n\nimport tree from '../tree';\n\nconst _SCOPE = 'oada.yield:all';\nconst _OPENATK_METADATA = 'eyJqa3UiOiJodHRwczovL2lkZW50aXR5Lm9hZGEtZGV2LmNvbS9jZXJ0cyIsImtpZCI6ImtqY1NjamMzMmR3SlhYTEpEczNyMTI0c2ExIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJyZWRpcmVjdF91cmlzIjpbImh0dHA6Ly9vcGVuYXRrLmNvbS9GaWVsZFdvcmtBcHAvb2F1dGgyL3JlZGlyZWN0Lmh0bWwiLCJodHRwOi8vbG9jYWxob3N0L29hdXRoMi9yZWRpcmVjdC5odG1sIl0sInRva2VuX2VuZHBvaW50X2F1dGhfbWV0aG9kIjoidXJuOmlldGY6cGFyYW1zOm9hdXRoOmNsaWVudC1hc3NlcnRpb24tdHlwZTpqd3QtYmVhcmVyIiwiZ3JhbnRfdHlwZXMiOlsiYXV0aG9yaXphdGlvbl9jb2RlIl0sInJlc3BvbnNlX3R5cGVzIjpbInRva2VuIiwiY29kZSIsImlkX3Rva2VuIiwiaWRfdG9rZW4gdG9rZW4iLCJjb2RlIGlkX3Rva2VuIiwiY29kZSB0b2tlbiIsImNvZGUgaWRfdG9rZW4gdG9rZW4iXSwiY2xpZW50X25hbWUiOiJPcGVuQVRLIiwiY2xpZW50X3VyaSI6Imh0dHA6Ly9vcGVuYXRrLmNvbSIsImNvbnRhY3RzIjpbIlNhbSBOb2VsIDxzYW5vZWxAcHVyZHVlLmVkdT4iXSwiandrcyI6eyJrZXlzIjpbeyJrdHkiOiJSU0EiLCJuIjoiemF1WkZCdU1kbHYxa1lqelViNHEtXzNtNHNtRnhuZnc0U1lvYUhxN2NpOFNjdFkzeGo3cmRBSHlrUXBuUVZyajZLTzhtYUh2LTBCdlc1TWhjZ2l2a3VZcy16SEV2ZllCZVZCbmN2SGdPa0pQYmM5MUN3X2l3T1k3RUhXQjhoTTdWaUxRVmNfRHYwaDhuSnliQnZoTDA0Q0hRdDdDcE10VllHNmZvSlhjM2RxNTJqTlFiQkhJWjVtN1Z6MUt0eXpvTGNwOE8ybWhhTHA0NVVyM0NfMWVHdHY4bjVOejliV19CaDVYRlliRHh2N0JuaFpOSXcxR0NiampBd210Ym5uTDdHZ2Y0Q3k2MHdSSG1SNHZvZTIxT0lqb0FTcTJqWjAzeDEybVhzN0hQSTNZQjR5Mjl3dlpNdzJnTHpPZFRvcnJxTy10bG1uMWJvUGtXS0pKU1hvQXZ3IiwiZSI6IkFRQUIifV19LCJzb2Z0d2FyZV9pZCI6ImE3MDNiZmRjLTNmYTEtNDk5Zi1iOTA1LTExZjBiNTRmMzgwNyIsInJlZ2lzdHJhdGlvbl9wcm92aWRlciI6Imh0dHBzOi8vaWRlbnRpdHkub2FkYS1kZXYuY29tIiwiaWF0IjoxNTMzODQ2MTEyfQ.Y9BlbqHzOvufADGAW9HG4Yx2rqbg6zPalpcjSS_97Mpg36lOuADGJ4YTQ2iQfRlZjzqBi1sUq3iFhReBfk89Oy2nSEY6RVPnONK5v6a73jce3xGPUWk8DDl3rf3lcrt-IqWFoAieUie7WK5nrPFIe-_xcgYdChnuGrugjO9dGOY';\nconst _LOCALHOST_VIP_METADATA = 'eyJqa3UiOiJodHRwczovL2lkZW50aXR5Lm9hZGEtZGV2LmNvbS9jZXJ0cyIsImtpZCI6ImtqY1NjamMzMmR3SlhYTEpEczNyMTI0c2ExIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJyZWRpcmVjdF91cmlzIjpbImh0dHA6Ly92aXAzLmVjbi5wdXJkdWUuZWR1OjgwMDAvb2F1dGgyL3JlZGlyZWN0Lmh0bWwiLCJodHRwOi8vbG9jYWxob3N0OjgwMDAvb2F1dGgyL3JlZGlyZWN0Lmh0bWwiXSwidG9rZW5fZW5kcG9pbnRfYXV0aF9tZXRob2QiOiJ1cm46aWV0ZjpwYXJhbXM6b2F1dGg6Y2xpZW50LWFzc2VydGlvbi10eXBlOmp3dC1iZWFyZXIiLCJncmFudF90eXBlcyI6WyJpbXBsaWNpdCJdLCJyZXNwb25zZV90eXBlcyI6WyJ0b2tlbiIsImlkX3Rva2VuIiwiaWRfdG9rZW4gdG9rZW4iXSwiY2xpZW50X25hbWUiOiJPcGVuQVRLIiwiY2xpZW50X3VyaSI6Imh0dHBzOi8vdmlwMy5lY24ucHVyZHVlLmVkdSIsImNvbnRhY3RzIjpbIlNhbSBOb2VsIDxzYW5vZWxAcHVyZHVlLmVkdT4iXSwic29mdHdhcmVfaWQiOiIxZjc4NDc3Zi0zNTQxLTQxM2ItOTdiNi04NjQ0YjRhZjViYjgiLCJyZWdpc3RyYXRpb25fcHJvdmlkZXIiOiJodHRwczovL2lkZW50aXR5Lm9hZGEtZGV2LmNvbSIsImlhdCI6MTUxMjAwNjc2MX0.AJSjNlWX8UKfVh-h1ebCe0MEGqKzArNJ6x0nmta0oFMcWMyR6Cn2saR-oHvU8WrtUMEr-w020mAjvhfYav4EdT3GOGtaFgnbVkIs73iIMtr8Z-Y6mDEzqRzNzVRMLghj7CyWRCNJEk0jwWjOuC8FH4UsfHmtw3ouMFomjwsNLY0';\nconst _REDIRECT_LOCALHOST = 'http://localhost:8000/oauth2/redirect.html';\nconst _REDIRECT_OPENATK = 'http://openatk.com/FieldWorkApp/oauth2/redirect.html';\nconst _TOKEN = '';\n\n//const _CURRENT_METADATA = _LOCALHOST_VIP_METADATA;\n//const _CURRENT_REDIRECT = _REDIRECT_LOCALHOST;\nconst _CURRENT_METADATA = _OPENATK_METADATA;\nconst _CURRENT_REDIRECT = _REDIRECT_OPENATK;\n\nfunction getConnectionProperties({get}) {\n  var domain = get(props`domain`);\n  var connect = {\n    domain,\n    options: {\n      redirect: _CURRENT_REDIRECT,\n      metadata: _CURRENT_METADATA,\n      scope:    _SCOPE\n    },\n    token: _TOKEN\n  }\n  return connect;\n}\n\nfunction saveConnectionId({props, store}) {\n  store.set(moduleState`currentConnection`, props.connection_id);\n}\n\nfunction createFieldsResource({}) {\n  let requests = [{\n    tree,\n    data: {},\n    path: '/bookmarks/fields'\n  }];\n  return {requests};\n}\nfunction createSeasonsResource({}) {\n  let requests = [{\n    tree,\n    data: {},\n    path: '/bookmarks/seasons'\n  }];\n  return {requests};\n}\n\nexport default [\n  getConnectionProperties,\n  oada.connect,\n  saveConnectionId\n]\n","import _ from 'lodash';\nimport changeSeasonFields from '../actions/changeSeasonFields';\n\nfunction onFieldChanged({props, get, store}) {\n  let changeType = _.get(props, 'response.change.type');\n  if (changeType == 'merge') {\n    var fieldsChanged = [];\n    _.forEach(_.get(props, 'response.change.body'), (obj, key) => {\n      if (_.startsWith(key, '_')) return false;\n      fieldsChanged.push({fieldId: key, name: obj.name, boundary: obj.boundary});\n    })\n    return {fieldsChanged};\n  }\n}\n\nexport default [\n  onFieldChanged,\n  changeSeasonFields\n]\n","\nimport onDomainChanged from './sequences/onDomainChanged'\nimport onFieldChanged from './sequences/onFieldChanged'\n\nexport default {\n  state: {\n    connected: false\n  },\n  sequences: {\n    onDomainChanged,\n    onFieldChanged\n  },\n  modules: {\n\n  }\n};\n","import connect from '../actions/connect';\nimport fetchAndWatch from '../actions/fetchAndWatch';\nimport initBookmarks from '../actions/initBookmarks';\nimport { set } from 'cerebral/factories'\nimport { moduleState, props } from \"cerebral\";\n\n\nexport default [\n  connect,\n  fetchAndWatch,\n  initBookmarks,\n  set(moduleState`connected`, true)\n]\n","import oada from \"@oada/cerebral-module/sequences\";\nimport tree from '../tree';\n\nfunction fetch({}) {\n  let requests = [\n    {\n      path: '/bookmarks/fields',\n      tree,\n      watch: {\n        signals: ['OADAManager.onFieldChanged']\n      }\n    },\n    {\n      path: '/bookmarks/seasons',\n      tree,\n      /*watch: {\n        signals: ['notes.mapOadaToRecords',]\n        // signals: ['notes.handleNotesWatch',]\n      },*/\n    }\n  ];\n  return {requests};\n}\n\nexport default [\n  fetch,\n  oada.get\n]\n","import oada from \"@oada/cerebral-module/sequences\";\nimport { moduleState, state, props } from \"cerebral\";\nimport { set, when } from 'cerebral/factories'\n\nimport tree from '../tree';\n\nfunction createFieldsResource() {\n  let requests = [{\n    tree,\n    data: {},\n    path: '/bookmarks/fields'\n  }];\n  return {requests};\n}\nfunction createSeasonsResource() {\n  let requests = [{\n    tree,\n    data: {},\n    path: '/bookmarks/seasons'\n  }];\n  return {requests};\n}\n\nexport default [\n  when(state`oada.${moduleState`currentConnection`}.bookmarks.fields`),\n  {\n    true: [],\n    false: [\n      createFieldsResource,\n      set(props`type`, undefined),\n      oada.put,\n    ]\n  },\n  when(state`oada.${moduleState`currentConnection`}.bookmarks.seasons`),\n  {\n    true: [],\n    false: [\n      createSeasonsResource,\n      set(props`type`, undefined),\n      oada.put\n    ]\n  }\n]\n","/*\n  Change a season fields name or boundary\n*/\nimport { state, props } from 'cerebral'\nimport _ from 'lodash';\nimport { when, set } from 'cerebral/factories'\nimport oada from \"@oada/cerebral-module/sequences\";\nimport tree from \"../tree.js\"\n\nfunction changeSeasonFields({props, path, get}) {\n  let requests = [];\n  _.forEach(props.fieldsChanged, (fieldChange) => {\n    let data = {};\n    if (fieldChange.name) data.name = fieldChange.name;\n    if (fieldChange.boundary) data.boundary = fieldChange.boundary;\n    if (_.isEmpty(data)) return;\n    requests.push(\n      { //Change season's field's name, boundary\n        tree,\n        data,\n        type: 'application/vnd.oada.field.1+json',\n        path: `/bookmarks/seasons/2019/fields/${fieldChange.fieldId}` //TODO year\n      }\n    )\n  })\n  if (requests.length == 0) return path.doNothing();\n  let currentConnection = get(state`OADAManager.currentConnection`)\n  return path.put({requests, connection_id: currentConnection});\n}\n\nexport default [\n  when(state`OADAManager.connected`),\n  {\n    true: [\n      changeSeasonFields,\n      {\n        put: [oada.put],\n        doNothing: []\n      }\n    ],\n    false: []\n  }\n]\n","export default {\n  \"a71add90-8e7e-11e9-b173-dbfcd80b1e21\": {\"id\":\"a71add90-8e7e-11e9-b173-dbfcd80b1e21\",\"name\":\"1005 Shultz Muck\",\"boundary\":{\"type\":\"Polygon\",\"coordinates\":[[[276.11022041179245,40.630162850630974],[276.11011312343186,40.6267592320778],[276.11959741450846,40.62692208859161],[276.11964032985276,40.62894147636931],[276.1140184197575,40.628974046639534],[276.1132674012334,40.62910432756155],[276.11245200969284,40.629250893295016],[276.11178682185715,40.62959287875549],[276.1114220414311,40.629869722845484],[276.1111430916936,40.63013028094058]]]}}\n  ,\"1a44fb70-8e7f-11e9-bdbd-692fecccc792\": {\"id\":\"1a44fb70-8e7f-11e9-bdbd-692fecccc792\",\"name\":\"1009 Grub-N\",\"boundary\":{\"type\":\"Polygon\",\"coordinates\":[[[276.10085279680794,40.63748356684687],[276.1054876539857,40.63748356684687],[276.10546619631356,40.636376309870336],[276.10368520952767,40.63631117653512],[276.10377104021615,40.63497592915958],[276.10087425448006,40.63491079445815]]]}}\n  ,\"8212ed20-8e7f-11e9-a624-f37c7ec83e91\": {\"id\":\"8212ed20-8e7f-11e9-a624-f37c7ec83e91\",\"name\":\"1013 Kalb\",\"boundary\":{\"type\":\"Polygon\",\"coordinates\":[[[276.11959875561297,40.62670690797686],[276.1164122913033,40.626658050907],[276.1164015624673,40.62525746637279],[276.115629086271,40.62520046521741],[276.11477124039084,40.62515730080567],[276.114427917637,40.62508401348705],[276.11415969673544,40.6248152926308],[276.1138271028176,40.62458728620793],[276.11370908562094,40.6243837083869],[276.1102114850655,40.6242697045361],[276.11024367157376,40.62317037170388],[276.119524911046,40.62322941040833],[276.1194819957018,40.623864582134765],[276.1190742999316,40.62390529806506],[276.1196510586888,40.62469785415195]]]}}\n}\n","import { state } from \"cerebral\";\nimport { set } from \"cerebral/factories\";\nimport TopBar from \"./modules/TopBar\";\nimport Modals from \"./modules/Modals\";\nimport Map from \"./modules/Map\";\nimport FieldDetails from \"./modules/FieldDetails\";\nimport OADAManager from './modules/OADAManager'\nimport OADA from \"@oada/cerebral-module\";\n\nimport testFields from './test/testFields';\nimport acresStatus from './computed/acresStatus';\n\nexport default {\n  state: {\n    acresStatus,\n    //Current field list\n    localData: {\n      organizations: {\n        'abc123': {\n          name: 'Default'\n        }\n      },\n      'abc123': {\n        fields: {\n          /*'a': {\n            id: 'a',\n            name: 'Back 40',\n            boundary: '' //GEOJSON\n          }*/\n          ...testFields,\n        },\n        seasons: {\n          /*'2019': {\n            fields: {\n              '<field-uuid>': {\n                season: 2018,\n                boundary: <geo-json>,\n                operations: {\n                  '<operation-uuid>': {}\n                }\n              }\n            },\n            operations: {\n              '<operation-uuid>': {\n                id: '<operation-uuid>',\n                year: 2019,\n                name: 'Corn Planting',\n                fields: {\n                  '<field-uuid>': {\n                    status: 'Planned',\n                  }\n                }\n              }\n            }\n          }*/\n          '2019': {\n            fields: {\n              ...testFields,\n            },\n            operations: {\n              /*'<operation-uuid>': {\n                id: '<operation-uuid>',\n                year: 2019,\n                name: 'Corn Planting',\n                fields: {\n                  '<field-uuid>': {\n                    status: 'Planned',\n                  }\n                }\n              }*/\n            }\n          }\n        }\n      }\n    }\n  },\n  modules: {\n    TopBar,\n    Modals,\n    Map,\n    FieldDetails,\n    OADAManager,\n    oada: OADA\n  },\n  sequences: {\n    toggleTitle: [ set(state`title`, \"You toggled me!\")],\n    onMapClick: [set(state`title`, \"Clicked\")]\n  }\n};\n","/*\n  Get amount of acres, planned, started and done.\n*/\n\nimport { state } from 'cerebral'\nimport _ from 'lodash';\nimport geojsonArea from '@mapbox/geojson-area';\nimport operationFields from './operationFields';\nimport seasonFields from './seasonFields';\n\nexport default function acresStatus (get) {\n  //Get id's of all fields in this operation\n  let fieldOperations = operationFields(get);\n  let fieldsSeason = seasonFields(get);\n  //Loop through each field, totaling acres.\n  let planned = 0;\n  let started = 0;\n  let done = 0;\n  _.forEach(fieldOperations, (fieldOperation, key) => {\n    //Get field\n    let field = fieldsSeason[key];\n    if (field == null) return;\n    //Compute area of field boundary\n    let area = geojsonArea.geometry(field.boundary) * 0.000247105 //Meters to acres;\n    if (fieldOperation.status == 'planned') {\n      planned += area;\n    } else if (fieldOperation.status == 'started') {\n      started += area;\n    } else if (fieldOperation.status == 'done') {\n      done += area;\n    }\n  });\n  let total = planned + started + done;\n  return {\n    planned: Math.round(planned),\n    plannedPercentage: Math.round((planned / (total || 1)) * 100),\n    started: Math.round(started),\n    startedPercentage: Math.round((started / (total || 1)) * 100),\n    done: Math.round(done),\n    donePercentage: Math.round((done / (total || 1)) * 100),\n  };\n}\n","/*\n  Get operationFields\n*/\nimport { state } from 'cerebral'\nimport {selectedOperation} from '../modules/TopBar/modules/OperationDropdown/computed/operations.js';\n\nexport default function operationFields (get) {\n  let operation = selectedOperation(get);  //Grabbing the computed from the state does not work here. Not sure why. See: https://github.com/cerebral/cerebral/issues/1397\n  let operationFields = [];\n  if (operation != null) {\n    if (get(state`OADAManager.connected`) == true) {\n      let currentConnection = get(state`OADAManager.currentConnection`)\n      operationFields = get(state`oada.${currentConnection}.bookmarks.seasons.2019.operations.${operation.id}.fields`) || []; //TODO year\n    } else {\n      operationFields = get(state`localData.abc123.seasons.2019.operations.${operation.id}.fields`) || []; //TODO year, organization\n    }\n  }\n  return operationFields;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nimport App from 'cerebral'\nimport Devtools from 'cerebral/devtools'\nimport { Container } from '@cerebral/react'\nimport AppComponent from './view/App'\nimport controller from './controller'\n\n\nlet devtools = null\n\nif (process.env.NODE_ENV !== 'production') {\n  devtools = Devtools({\n    // Connect to Electron debugger (external debugger). It will\n    // fall back to chrome extension if unable to connect\n    host: 'localhost:8585',\n\n    // By default devtools connects to \"ws://\". This option should be set to true\n    // when browser operates on https. Follow debugger instructions for\n    // further configuration\n    https: false,\n\n    // By default the devtools tries to reconnect\n    // to debugger when it can not be reached, but\n    // you can turn it off\n    reconnect: true,\n\n    // Time travel\n    storeMutations: true,\n\n    // Shows a warning when you have components with number of\n    // state dependencies or signals above the set number\n    bigComponentsWarning: 15,\n\n    // Warnings when passing objects and arrays as props to child\n    // components. They should rather be connected directly\n    warnStateProps: true,\n\n    // In addition to these basic JavaScript types: Object, Array, String, Number\n    // and Boolean, types of File, FileList, Blob, ImageData and RegExp is allowed to be stored in state\n    // tree. You can add additional types if you know what you are doing :)\n    allowedTypes: [Blob]\n  })\n}\n\nconst app = App(controller, {devtools})\n\nReactDOM.render(\n  <Container app={app}>\n    <AppComponent />\n  </Container>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}